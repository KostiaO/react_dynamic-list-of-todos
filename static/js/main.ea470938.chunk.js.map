{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ShowType","TodoList","todoList","setId","useState","query","setQuery","All","showBy","setShowBy","visibleTodos","filter","todo","title","toLowerCase","includes","className","type","value","onChange","target","name","event","Completed","Uncompleted","completed","result","map","readOnly","checked","onClick","Number","userId","id","BASE_URL","getTodosFromServer","a","fetch","response","json","findUser","CurrentUser","deleteUser","user","setUser","userErr","setUserErr","getUser","neededUser","useEffect","email","phone","App","selectedUserId","setSelectedUserId","setTodoList","todoErr","setTodoErr","getTodos","useCallback","todos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea470938.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TodoType } from '../../types/TodoType';\nimport './TodoList.scss';\n\ninterface Props {\n  todoList: TodoType[],\n  setId: (id: number) => void\n}\n\nenum ShowType {\n  All = 'all',\n  Completed = 'completed',\n  Uncompleted = 'uncompleted',\n}\n\nexport const TodoList: React.FC<Props> = ({ todoList, setId }) => {\n  const [query, setQuery] = useState('');\n\n  const [showBy, setShowBy] = useState(ShowType.All);\n\n  const visibleTodos\n    = todoList\n      .filter(todo => {\n        return todo.title.toLowerCase()\n          .includes(query.toLowerCase());\n      });\n\n  const result = () => {\n    switch (showBy) {\n      case ShowType.All:\n        return [...visibleTodos];\n      case ShowType.Completed:\n        return visibleTodos.filter(todo => todo.completed);\n      case ShowType.Uncompleted:\n        return visibleTodos.filter(todo => !todo.completed);\n      default:\n        return [...visibleTodos];\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      Filter\n      <input\n        type=\"text\"\n        value={query}\n        onChange={({ target }) => setQuery(target.value)}\n      />\n      <br />\n      <select\n        name=\"showby\"\n        value={showBy}\n        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\n          setShowBy(event.target.value);\n        }}\n      >\n        <option value={ShowType.All}>{ShowType.All}</option>\n        <option value={ShowType.Completed}>{ShowType.Completed}</option>\n        <option value={ShowType.Uncompleted}>{ShowType.Uncompleted}</option>\n      </select>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {result().map(todo => (\n            <li\n              key={todo.id}\n              className=\"TodoList__item TodoList__item--unchecked\"\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => setId(Number(todo.userId))}\n              >\n                Select user\n                {' '}\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { TodoType } from '../types/TodoType';\nimport { UserType } from '../types/UserType';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getTodosFromServer(): Promise<TodoType[]> {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function findUser(userId: number): Promise<UserType> {\n  const response = await fetch(`https://mate.academy/students-api/users/${userId}`);\n\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useEffect, useState } from 'react';\nimport { findUser } from '../../api/api';\nimport { UserType } from '../../types/UserType';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  deleteUser: () => void\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, deleteUser }) => {\n  const [user, setUser] = useState<UserType | null>(null);\n\n  const [userErr, setUserErr] = useState(false);\n\n  const getUser = async () => {\n\n    try {\n      const neededUser = await findUser(userId);\n\n      if (neededUser) {\n        setUser(neededUser);\n        setUserErr(false);\n      }\n    } catch (error: any) {\n      setUserErr(true);\n    }\n  };\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {!userErr ? (\n        <><h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user?.id}\n          </span>\n        </h2><h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          onClick={deleteUser}\n        >\n            Remove\n          </button></>\n      ): <p>Cannot find user</p>}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoType } from './types/TodoType';\nimport { getTodosFromServer } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState<number>(0);\n\n  const [todoList, setTodoList] = useState<TodoType[]>([]);\n\n  const [todoErr, setTodoErr] = useState(false);\n\n  const getTodos = useCallback(async () => {\n    try {\n      const todos = await getTodosFromServer();\n\n      if (todos) {\n        setTodoErr(false);\n        setTodoList(todos);\n      }\n\n    } catch (error) {\n      setTodoErr(true);\n    }\n  }, []);\n\n  const setId = useCallback((id: number) => {\n    setSelectedUserId(id);\n  }, []);\n\n  const deleteUser = useCallback(() => {\n    setSelectedUserId(0);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {!todoErr ? (<TodoList\n          todoList={todoList}\n          setId={setId}\n        />) : <p>Nothing finded</p>}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              deleteUser={deleteUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}